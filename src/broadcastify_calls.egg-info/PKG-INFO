Metadata-Version: 2.4
Name: broadcastify-calls
Version: 0.1.0
Summary: Async Broadcastify client scaffolding for consuming live and archived call feeds.
Author: Jonathan Bradshaw
License: UNLICENSED
Keywords: broadcastify,asyncio,event-driven,audio,telemetry
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Framework :: AsyncIO
Classifier: Topic :: Communications
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Requires-Python: >=3.13
Description-Content-Type: text/markdown
Requires-Dist: aiolimiter>=1.1.0
Requires-Dist: anyio>=4.4.0
Requires-Dist: httpx[http2]>=0.27.0
Requires-Dist: pydantic>=2.7.0
Provides-Extra: telemetry
Requires-Dist: opentelemetry-instrumentation-httpx>=0.47b0; extra == "telemetry"
Requires-Dist: opentelemetry-sdk>=1.28.0; extra == "telemetry"
Provides-Extra: transcription
Requires-Dist: openai>=1.40.0; extra == "transcription"

# Broadcastify Calls

Async-first client scaffolding for integrating with Broadcastify live call feeds, archive metadata, and optional transcription pipelines.

## Environment Requirements

- [uv](https://docs.astral.sh/uv/) 0.4 or newer
- CPython 3.13.x (uv will manage the runtime automatically)

## Getting Started

```bash
uv sync --group dev
```

The command above will

- create a local `.venv` pinned to Python 3.13,
- install runtime dependencies from `pyproject.toml`, and
- add the development toolchain defined in the `dev` group (pytest, ruff, coverage).

To add optional capabilities:

```bash
uv sync --group dev --group transcription   # Whisper/OpenAI integration
uv sync --group dev --group telemetry       # OpenTelemetry instrumentation
```

## Common Tasks

| Task | Command |
| ---- | ------- |
| Run tests | `uv run pytest` |
| Lint + format | `uv run ruff check .` and `uv run ruff format .` |
| Type checking | `uv tool install pyright` *(once)*, then `uv tool run pyright` |
| Coverage report | `uv run coverage run -m pytest && uv run coverage report` |
| Add a dependency | `uv add <package>` |
| Update locked versions | `uv lock --upgrade` |

## Project Layout

```
src/
  broadcastify_client/    # library package (async event-driven core)
    __init__.py
    py.typed
 tests/                   # pytest-based async tests (placeholder)
```

## Next Steps

- Implement the async HTTP client abstractions, authentication, and event bus described in `API.md`.
- Define Pydantic configuration models under `config.py` to validate credentials and runtime tuning.
- Add contract and integration tests covering header spoofing, rate limiting, and transcription flows.

